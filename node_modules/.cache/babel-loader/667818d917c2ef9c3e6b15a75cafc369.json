{"ast":null,"code":"import _slicedToArray from \"/Users/vehbik/Desktop/React/test/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/vehbik/Desktop/React/test/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nlet states = [];\nlet calls = -1;\n\nconst useState = initialValue => {\n  let callId = ++calls;\n  let value = initialValue;\n\n  if (states[callId]) {\n    return states[callId];\n  }\n\n  const setValue = newValue => {\n    states[callId][0] = newValue;\n    myRender();\n  };\n\n  let tuple = [value, setValue];\n  states[callId] = tuple;\n  return tuple;\n};\n\nconst Test = () => {\n  let _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  console.log(count, setCount, states);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, count), React.createElement(\"button\", {\n    onClick: () => {\n      setCount(count + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Increment\"));\n};\n\nfunction myRender() {\n  ReactDOM.render(React.createElement(Test, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), document.getElementById(\"root\"));\n}\n\nReactDOM.render(React.createElement(Test, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/vehbik/Desktop/React/test/src/index.js"],"names":["React","ReactDOM","states","calls","useState","initialValue","callId","value","setValue","newValue","myRender","tuple","Test","count","setCount","console","log","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,IAAIC,MAAM,GAAG,EAAb;AAEA,IAAIC,KAAK,GAAG,CAAC,CAAb;;AAEA,MAAMC,QAAQ,GAAGC,YAAY,IAAI;AAChC,MAAIC,MAAM,GAAG,EAAEH,KAAf;AACA,MAAII,KAAK,GAAGF,YAAZ;;AAEA,MAAIH,MAAM,CAACI,MAAD,CAAV,EAAoB;AACnB,WAAOJ,MAAM,CAACI,MAAD,CAAb;AACA;;AAED,QAAME,QAAQ,GAAGC,QAAQ,IAAI;AAC5BP,IAAAA,MAAM,CAACI,MAAD,CAAN,CAAe,CAAf,IAAoBG,QAApB;AACAC,IAAAA,QAAQ;AACR,GAHD;;AAKA,MAAIC,KAAK,GAAG,CAACJ,KAAD,EAAQC,QAAR,CAAZ;AAEAN,EAAAA,MAAM,CAACI,MAAD,CAAN,GAAiBK,KAAjB;AAEA,SAAOA,KAAP;AACA,CAlBD;;AAoBA,MAAMC,IAAI,GAAG,MAAM;AAAA,kBACMR,QAAQ,CAAC,CAAD,CADd;AAAA;AAAA,MACbS,KADa;AAAA,MACNC,QADM;;AAElBC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,QAAnB,EAA6BZ,MAA7B;AACA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKW,KAAL,CADD,EAEC;AACC,IAAA,OAAO,EAAE,MAAM;AACdC,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACA,KAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFD,CADD;AAYA,CAfD;;AAiBA,SAASH,QAAT,GAAoB;AACnBT,EAAAA,QAAQ,CAACgB,MAAT,CAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB,EAA0BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B;AACA;;AACDlB,QAAQ,CAACgB,MAAT,CAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA0BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nlet states = [];\n\nlet calls = -1;\n\nconst useState = initialValue => {\n\tlet callId = ++calls;\n\tlet value = initialValue;\n\n\tif (states[callId]) {\n\t\treturn states[callId];\n\t}\n\n\tconst setValue = newValue => {\n\t\tstates[callId][0] = newValue;\n\t\tmyRender();\n\t};\n\n\tlet tuple = [value, setValue];\n\n\tstates[callId] = tuple;\n\n\treturn tuple;\n};\n\nconst Test = () => {\n\tlet [count, setCount] = useState(0);\n\tconsole.log(count, setCount, states);\n\treturn (\n\t\t<div>\n\t\t\t<h1>{count}</h1>\n\t\t\t<button\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetCount(count + 1);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tIncrement\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nfunction myRender() {\n\tReactDOM.render(<Test />, document.getElementById(\"root\"));\n}\nReactDOM.render(<Test />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}